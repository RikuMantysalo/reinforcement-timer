{"version":3,"sources":["constants/intervals.ts","Stepper.tsx","reducers/appReducer.ts","App.tsx","hooks/useInterval.ts","serviceWorker.ts","index.tsx"],"names":["intervals","1","2","3","4","5","6","7","8","StyledMobileStepper","styled","MobileStepper","DotsStepper","props","variant","steps","stepCount","position","activeStep","nextButton","Button","size","onClick","dispatch","type","payload","disabled","backButton","appReducer","state","action","level","Object","keys","length","intervalIndex","isTimerTicking","timeLeft","FlexCenter","div","LevelIndicator","h1","AppHeader","header","Counter","p","Progress","StepperContainer","nav","initialState","App","useReducer","useState","setTimeLeft","shouldAnnounce","setShouldAnnounce","useEffect","keyboardShortCutHandler","useCallback","e","code","document","addEventListener","removeEventListener","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","time","IconButton","KeyboardArrowLeft","style","flex","aria-live","KeyboardArrowRight","Fab","color","aria-label","aria-pressed","marginBottom","start","Replay","Pause","PlayArrow","renderIcon","Boolean","window","location","hostname","match","GlobalStyles","createGlobalStyle","normalize","ReactDOM","render","StylesProvider","injectFirst","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e2c1d021.chunk.js","sourcesContent":["type IntervalShape = {[key: number]: number[]}\n\nexport const intervals: IntervalShape ={\n  1: [5,2,6,3,7,3,5,1,7,4,3,5,1],\n  2:[7,3,10,5,8,4,7,2,5,10,3,7,2],\n  3:[10,5,8,4,12,6,10,3,7,10,5,12,1,10,3],\n  4: [12,6,10,4,15,7,12,6,15,8,12,2,10,4],\n  5: [15,7,12,8,13,6,20,2,10,7,15,9,20,12,8,15,7,3],\n  6: [20,10,12,8,15,9,17,10,25,15,2,20,10,25,13,5],\n  7: [15,25,12,20,5,15,25,2,18,30,12,25,15,30,25,12,3],\n  8: [25,29,15,20,10,17,35,5,25,30,15,20,35,17,30,15,5]\n} ","import React from 'react';\nimport MobileStepper from '@material-ui/core/MobileStepper';\nimport Button from '@material-ui/core/Button';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport { ActionType } from './reducers/appReducer';\nimport styled from 'styled-components';\n\nconst StyledMobileStepper = styled(MobileStepper)`\n  width: 100%;\n`\n\nexport const DotsStepper = (props: { stepCount: number; activeStep: number; dispatch: React.Dispatch<ActionType> }) => {\n    return (\n        <StyledMobileStepper\n            variant='dots'\n            steps={props.stepCount}\n            position='static'\n            activeStep={props.activeStep}\n            nextButton={\n                <Button\n                    size='small'\n                    onClick={() => props.dispatch({ type: 'LEVEL_CHANGED', payload: 'increment' })}\n                    disabled={props.activeStep === props.stepCount - 1}\n                >\n                    Next\n                    <KeyboardArrowRight />\n                </Button>\n            }\n            backButton={\n                <Button\n                    size='small'\n                    onClick={() => props.dispatch({ type: 'LEVEL_CHANGED', payload: 'decrement' })}\n                    disabled={props.activeStep === 0}\n                >\n                    <KeyboardArrowLeft />\n                    Back\n                </Button>\n            }\n        />\n    );\n};\n","import { intervals } from '../constants/intervals'\n\nconst LEVEL_CHANGED = 'LEVEL_CHANGED';\nconst INTERVAL_CHANGED = 'INTERVAL_CHANGED';\nconst TIMER_BUTTON_CLICKED = 'TIMER_BUTTON_CLICKED';\n\ninterface ChangeLevelType {\n    type: typeof LEVEL_CHANGED;\n    payload: 'increment' | 'decrement';\n}\n\ninterface ChangeIntervalType {\n    type: typeof INTERVAL_CHANGED;\n    payload: 'increment' | 'decrement';\n}\n\ninterface TimerButtonClickedType {\n    type: typeof TIMER_BUTTON_CLICKED;\n    payload: {\n      timeLeft: number\n    }\n}\n\nexport type ActionType = ChangeLevelType | ChangeIntervalType | TimerButtonClickedType \n\nexport interface AppState {\n    level: number;\n    intervalIndex: number;\n    isTimerTicking: boolean;\n}\n\nexport const appReducer = (state: AppState, action: ActionType): AppState => {\n    switch (action.type) {\n        case LEVEL_CHANGED:\n            if (action.payload === 'increment' && state.level < Object.keys(intervals).length) {\n                return {\n                    intervalIndex: 0,\n                    level: state.level + 1,\n                    isTimerTicking: false,\n                };\n            } else if (action.payload === 'decrement' && state.level > 1) {\n                return {\n                    intervalIndex: 0,\n                    level: state.level - 1,\n                    isTimerTicking: false\n                };\n            }\n            return { ...state };\n        case INTERVAL_CHANGED:\n            if (action.payload === 'increment' && state.intervalIndex < intervals[state.level].length - 1) {\n                return {\n                    ...state,\n                    intervalIndex: state.intervalIndex + 1,\n                    isTimerTicking: false\n                };\n            } else if (action.payload === 'decrement' && state.intervalIndex > 0) {\n                return {\n                    ...state,\n                    intervalIndex: state.intervalIndex - 1,\n                    isTimerTicking: false\n                };\n            }\n            return { ...state };\n        case TIMER_BUTTON_CLICKED:\n            if (state.intervalIndex === intervals[state.level].length - 1 && action.payload.timeLeft === 0) {\n                return { ...state, isTimerTicking: false, intervalIndex: 0 };\n            }\n            if (state.isTimerTicking) {\n                return { ...state, isTimerTicking: false };\n            } else if (state.isTimerTicking === false) {\n                return { ...state, isTimerTicking: true };\n            }\n            return { ...state };\n    }\n};","import React, { useState, useEffect, useCallback, useReducer } from 'react';\nimport styled from 'styled-components';\nimport { intervals } from './constants/intervals';\nimport { useInterval } from './hooks/useInterval';\nimport Fab from '@material-ui/core/Fab';\nimport { PlayArrow, Pause, Replay, KeyboardArrowLeft, KeyboardArrowRight } from '@material-ui/icons';\nimport { DotsStepper } from './Stepper';\nimport { AppState, appReducer } from './reducers/appReducer';\nimport { IconButton } from '@material-ui/core';\n\nconst FlexCenter = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    height: 100%;\n`;\n\nconst LevelIndicator = styled.h1`\n    margin-top: 0;\n`;\n\nconst AppHeader = styled.header`\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n    flex-grow: 2;\n`;\n\nconst Counter = styled.p`\n    font-size: 10rem;\n    font-weight: 700;\n    margin: 0;\n`;\n\nconst Progress = styled.p`\n    font-size: 1rem;\n    font-weight: 400;\n    margin: 0;\n    text-align: center;\n`;\n\nconst StepperContainer = styled.nav`\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n    align-items: center;\n    flex-grow: 1;\n    @media only screen and (max-width: 480px) {\n        width: 100%;\n    }\n`;\n\nconst initialState: AppState = {\n    level: 1,\n    intervalIndex: 0,\n    isTimerTicking: false,\n};\n\nconst renderIcon = (start: boolean, level: number, intervalIndex: number, timeLeft: number) => {\n    if (intervalIndex === intervals[level].length - 1 && timeLeft === 0) {\n        return <Replay />;\n    } else if (start) {\n        return <Pause />;\n    }\n    return <PlayArrow />;\n};\n\nconst App = () => {\n    const [state, dispatch] = useReducer(appReducer, initialState);\n    const [timeLeft, setTimeLeft] = useState(intervals[state.level][0]);\n    const [shouldAnnounce, setShouldAnnounce] = useState(true);\n\n    useEffect(() => setTimeLeft(intervals[state.level][state.intervalIndex]), [state.level, state.intervalIndex]);\n\n    const keyboardShortCutHandler = useCallback(\n        e => {\n            if (e.code === 'Space') dispatch({ type: 'TIMER_BUTTON_CLICKED', payload: { timeLeft } });\n            else if (e.code === 'ArrowDown') dispatch({ type: 'LEVEL_CHANGED', payload: 'decrement' });\n            else if (e.code === 'ArrowUp') dispatch({ type: 'LEVEL_CHANGED', payload: 'increment' });\n            else if (e.code === 'ArrowRight') dispatch({ type: 'INTERVAL_CHANGED', payload: 'increment' });\n            else if (e.code === 'ArrowLeft') dispatch({ type: 'INTERVAL_CHANGED', payload: 'decrement' });\n        },\n        [timeLeft]\n    );\n\n    useEffect(() => {\n        document.addEventListener('keydown', keyboardShortCutHandler);\n        return () => document.removeEventListener('keydown', keyboardShortCutHandler);\n    });\n\n    useEffect(() => {\n        if (timeLeft === 0) {\n            setShouldAnnounce(false);\n        } else if (state.isTimerTicking) {\n            setShouldAnnounce(true);\n        }\n    }, [timeLeft, state.isTimerTicking]);\n\n    useInterval(\n        () => {\n            if (timeLeft > 0) {\n                setTimeLeft(time => time - 1);\n            }\n            if (timeLeft === 0) {\n                dispatch({ type: 'INTERVAL_CHANGED', payload: 'increment' });\n            }\n        },\n        state.isTimerTicking ? 1000 : null\n    );\n\n    return (\n        <FlexCenter>\n            <AppHeader>\n                <IconButton\n                    disabled={state.intervalIndex === 0}\n                    onClick={() => dispatch({ type: 'INTERVAL_CHANGED', payload: 'decrement' })}\n                >\n                    <KeyboardArrowLeft />\n                </IconButton>\n                <div style={{ flex: 1 }}>\n                    <Counter aria-live={shouldAnnounce ? 'polite' : 'off'}>{timeLeft}</Counter>\n                    <Progress>\n                        {state.intervalIndex + 1} / {intervals[state.level].length}\n                    </Progress>\n                </div>\n                <IconButton\n                    disabled={state.intervalIndex === intervals[state.level].length - 1}\n                    onClick={() => dispatch({ type: 'INTERVAL_CHANGED', payload: 'increment' })}\n                >\n                    <KeyboardArrowRight />\n                </IconButton>\n            </AppHeader>\n            <StepperContainer>\n                <Fab\n                    onClick={() => dispatch({ type: 'TIMER_BUTTON_CLICKED', payload: { timeLeft } })}\n                    color='primary'\n                    aria-label={state.isTimerTicking ? 'stop timer' : 'start timer'}\n                    aria-pressed={state.isTimerTicking}\n                    style={{ marginBottom: '2rem' }}\n                >\n                    {renderIcon(state.isTimerTicking, state.level, state.intervalIndex, timeLeft)}\n                </Fab>\n                <LevelIndicator aria-live='polite'>Level {state.level}</LevelIndicator>\n                <DotsStepper\n                    activeStep={state.level - 1}\n                    dispatch={dispatch}\n                    stepCount={Object.keys(intervals).length}\n                />\n            </StepperContainer>\n        </FlexCenter>\n    );\n};\n\nexport default App;\n","import { useRef, useEffect } from 'react'\n\nexport const useInterval = (callback: () => void, delay: number | null) => {\n  const savedCallback = useRef(callback);\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport normalize from 'styled-normalize';\nimport { StylesProvider } from '@material-ui/styles';\nimport { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyles = createGlobalStyle`\n${normalize}\nhtml, body {\n  height: 100%;\n}\nbody {\n  font-family: Helvetica, Sans-Serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-rendering: optimizeLegibility;\n}\n#root {\n  height: 100%;\n}\n`;\n\nReactDOM.render(\n    <StylesProvider injectFirst>\n        <GlobalStyles />\n        <App />\n    </StylesProvider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}