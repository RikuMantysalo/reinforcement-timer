{"version":3,"sources":["constants/intervals.ts","App.tsx","hooks/useInterval.ts","serviceWorker.ts","index.tsx"],"names":["intervals","1","2","3","4","5","6","7","8","FlexCenter","styled","div","LevelIndicator","h1","TimeButtonGroup","ButtonGroup","AppHeader","header","Counter","p","MainContainer","main","TimeButton","Button","selected","App","useState","level","setLevel","timeIndex","setTimeIndex","start","setStart","timeLeft","setTimeLeft","useEffect","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","time","setTimeout","length","aria-live","IconButton","disabled","onClick","aria-label","ArrowBackIos","orientation","color","map","index","ArrowForwardIos","Fab","style","position","bottom","right","Pause","PlayArrow","Boolean","window","location","hostname","match","GlobalStyles","createGlobalStyle","normalize","ReactDOM","render","StylesProvider","injectFirst","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.024e47e7.chunk.js","sourcesContent":["type IntervalShape = {[key: number]: number[]}\n\nexport const intervals: IntervalShape ={\n  1: [5,2,6,3,7,3,5,1,7,4,3,5,1],\n  2:[7,3,10,5,8,4,7,2,5,10,3,7,2],\n  3:[10,5,8,4,12,6,10,3,7,10,5,12,1,10,3],\n  4: [12,6,10,4,15,7,12,6,15,8,12,2,10,4],\n  5: [15,7,12,8,13,6,20,2,10,7,15,9,20,12,8,15,7,3],\n  6: [20,10,12,8,15,9,17,10,25,15,2,20,10,25,13,5],\n  7: [15,25,12,20,5,15,25,2,18,30,12,25,15,30,25,12,3],\n  8: [25,29,15,20,10,17,35,5,25,30,15,20,35,17,30,15,5]\n} ","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { intervals } from './constants/intervals';\nimport { useInterval } from './hooks/useInterval';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Fab from '@material-ui/core/Fab';\nimport { PlayArrow, Pause, ArrowBackIos, ArrowForwardIos } from '@material-ui/icons';\nimport IconButton from '@material-ui/core/IconButton';\n\nconst FlexCenter = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    height: 100vh;\n`;\n\nconst LevelIndicator = styled.h1`\n    margin-top: 0;\n`;\n\nconst TimeButtonGroup = styled(ButtonGroup)`\n    min-width: 100px;\n    height: 90%;\n    overflow: auto;\n`;\n\nconst AppHeader = styled.header`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`;\n\nconst Counter = styled.p`\n    font-size: 2.5rem;\n    font-weight: 700;\n    margin: 0;\n`;\n\nconst MainContainer = styled.main`\n    display: flex;\n    align-items: center;\n    height: 100%;\n`;\n\ntype TimeButtonProps = {\n    selected: boolean;\n};\nconst TimeButton = styled(Button)<TimeButtonProps>`\n    &&& {\n        background-color: ${({ selected }) => (selected ? 'hotpink' : 'inherit')};\n        color: ${({ selected }) => (selected ? 'black' : 'inherit')};\n    }\n`;\n\nconst App = () => {\n    const [level, setLevel] = useState(1);\n    const [timeIndex, setTimeIndex] = useState(0);\n    const [start, setStart] = useState(false);\n\n    const [timeLeft, setTimeLeft] = useState(intervals[level][timeIndex]);\n\n    useEffect(() => setTimeIndex(0), [level]);\n\n    useEffect(() => {\n        setStart(false);\n        setTimeLeft(intervals[level][timeIndex]);\n    }, [timeIndex, level]);\n\n    useInterval(\n        () => {\n            if (timeLeft > 0) {\n                setTimeLeft(time => time - 1);\n            }\n            if (timeLeft === 0) {\n              setStart(false);\n              setTimeout(() => {\n                setTimeIndex(timeIndex => {\n                  if (timeIndex < intervals[level].length - 1) {\n                      return timeIndex + 1;\n                  }\n                  return 0;\n              });\n              }, 0)\n            }\n        },\n        start ? 1000 : null\n    );\n\n    const incrementLevel = () => {\n        if (level < 8) {\n            setLevel(level => level + 1);\n        }\n    };\n    const decrementLevel = () => {\n        if (level > 1) {\n            setLevel(level => level - 1);\n        }\n    };\n    return (\n        <FlexCenter>\n            <AppHeader>\n                <LevelIndicator aria-live='polite'>Level {level}</LevelIndicator>\n                <Counter aria-live={start ? 'polite' : 'off'}>{timeLeft}</Counter>\n            </AppHeader>\n            <MainContainer>\n                <IconButton\n                    disabled={level === 1 ? true : false}\n                    onClick={() => decrementLevel()}\n                    aria-label='go to previous level'\n                >\n                    <ArrowBackIos />\n                </IconButton>\n                <TimeButtonGroup orientation='vertical' color='primary' aria-label='time selector button group'>\n                    {intervals[level].map((time, index) => (\n                        <TimeButton\n                            onClick={() => {\n                                setStart(false);\n                                setTimeIndex(index);\n                            }}\n                            aria-label={`Select time period of ${time} seconds`}\n                            selected={index === timeIndex}\n                        >\n                            {time}\n                        </TimeButton>\n                    ))}\n                </TimeButtonGroup>\n                <IconButton\n                    disabled={level === 8 ? true : false}\n                    onClick={() => incrementLevel()}\n                    aria-label='next level'\n                >\n                    <ArrowForwardIos />\n                </IconButton>\n                <Fab\n                    onClick={() => setStart(start => !start)}\n                    style={{ position: 'absolute', bottom: '16px', right: '16px' }}\n                    color='primary'\n                    aria-label={start ? 'stop timer' : 'start timer'}\n                >\n                    {start ? <Pause /> : <PlayArrow />}\n                </Fab>\n            </MainContainer>\n        </FlexCenter>\n    );\n};\n\nexport default App;\n","import { useRef, useEffect } from 'react'\n\nexport const useInterval = (callback: () => void, delay: number | null) => {\n  const savedCallback = useRef(callback);\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport normalize from 'styled-normalize';\nimport { StylesProvider } from '@material-ui/styles';\nimport { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyles = createGlobalStyle`\n${normalize}\nbody {\nfont-family: Helvetica, Sans-Serif;\n}\n`\n\nReactDOM.render(\n    <StylesProvider injectFirst>\n      <GlobalStyles/>\n        <App />\n    </StylesProvider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}